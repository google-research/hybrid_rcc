// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "stats/distributions/univariate/continuous/truncated_gaussian.h"

#include <math.h>

#include <cmath>
#include <complex>
#include <cstdint>
#include <utility>

#include "stats/statistical_tests/kolmogorov_smirnov.h"
#include "testing/base/public/gmock.h"
#include "testing/base/public/gunit.h"
#include <pcg_random.hpp>
namespace stats {
namespace univariates {
namespace {

class TruncatedGaussianTest : public ::testing::Test {
 protected:
  TruncatedGaussianTest() {}

  ~TruncatedGaussianTest() override {}

  void SetUp() override {}

  void TearDown() override {}
};

TEST_F(TruncatedGaussianTest, PDF) {
  std::vector<std::array<double, 6>> tests{
      {0.2683166574170076, -0.3040359726977925, 0.033307127027272954,
       0.1444406727556216, 0.4975324159591916, 0.0},
      {-1.0613743574774592, -3.1318183421299786, -2.4459590874833017,
       -1.601455169898511, 0.916843394955863, 0.0},
      {-0.009225330077154549, -0.6267926662331764, -0.51599750078226,
       -0.4700952620769832, 0.22442106744483728, 0.0},
      {0.40222734843680114, -0.8276936456605248, -0.7663920912457317,
       -1.0710920878081216, 0.7808034062688369, 0.0},
      {-0.8724859930419556, 2.152495422980133, 2.2693431905541304,
       2.2416655054611314, 0.6520542436665557, 0.0},
      {0.23350099564321639, -2.2636068653259143, -1.1682280591668683,
       -1.4880393393905609, 0.6617894962730232, 0.0},
      {-1.020548868806198, -1.7809695896826472, 0.49616423594839276,
       -0.254351355657926, 0.8851689086107829, 0.4080228666966283},
      {0.011539244334195065, -0.19275795573261895, -0.05140136672321616,
       0.42692229236956386, 0.47711696524752295, 0.0},
      {-0.4688972841558026, -0.46103909854365765, 3.5889505333957583,
       -0.29585428533865576, 1.4555604095213284, 0.0},
      {0.06166215074752048, 0.05077539628402494, 3.7609337639175164,
       1.0513101409898964, 1.2362742974168017, 0.30159735079670474}};
  for (auto [x, a, b, mu, std, want] : tests) {
    double got = stats::univariates::TruncatedGaussian(mu, std, a, b).pdf(x);
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}
TEST_F(TruncatedGaussianTest, LOGPDF) {
  std::vector<std::array<double, 6>> tests{
      {0.2683166574170076, -0.3040359726977925, 0.033307127027272954,
       0.1444406727556216, 0.4975324159591916, 0.0},
      {-1.0613743574774592, -3.1318183421299786, -2.4459590874833017,
       -1.601455169898511, 0.916843394955863, 0.0},
      {-0.009225330077154549, -0.6267926662331764, -0.51599750078226,
       -0.4700952620769832, 0.22442106744483728, 0.0},
      {0.40222734843680114, -0.8276936456605248, -0.7663920912457317,
       -1.0710920878081216, 0.7808034062688369, 0.0},
      {-0.8724859930419556, 2.152495422980133, 2.2693431905541304,
       2.2416655054611314, 0.6520542436665557, 0.0},
      {0.23350099564321639, -2.2636068653259143, -1.1682280591668683,
       -1.4880393393905609, 0.6617894962730232, 0.0},
      {-1.020548868806198, -1.7809695896826472, 0.49616423594839276,
       -0.254351355657926, 0.8851689086107829, 0.4080228666966283},
      {0.011539244334195065, -0.19275795573261895, -0.05140136672321616,
       0.42692229236956386, 0.47711696524752295, 0.0},
      {-0.4688972841558026, -0.46103909854365765, 3.5889505333957583,
       -0.29585428533865576, 1.4555604095213284, 0.0},
      {0.06166215074752048, 0.05077539628402494, 3.7609337639175164,
       1.0513101409898964, 1.2362742974168017, 0.30159735079670474}};
  for (auto [x, a, b, mu, std, e_want] : tests) {
    double got = stats::univariates::TruncatedGaussian(mu, std, a, b).logpdf(x);
    double want = std::log(e_want);
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}

TEST_F(TruncatedGaussianTest, CDF) {
  std::vector<std::array<double, 6>> tests{
      {0.023044539670701927, 0.8343111097078447, 1.7518465569997654,
       -0.006189008944721417, 0.9850020887012048, 0.0},
      {1.7079345025707902, 0.38457492603536364, 0.6489109325776785,
       0.44821718688884865, 0.27752257112317813, 1.0},
      {0.2951368655820268, -1.4102368904309945, -0.7203886388532474,
       -0.5169836203420768, 0.648766969666837, 1.0},
      {0.022945138624111464, 0.7591682245614444, 0.7972901052969669,
       0.40943348288048376, 0.1947243177995526, 0.0},
      {-0.7176749681226903, -0.15059669139339069, 0.4874065417708763,
       0.18161710109039322, 0.45408383271769837, 0.0},
      {0.9499147375132703, -0.6407184358857416, -0.45300639083671657,
       -0.2286240604176264, 0.4619452512913419, 1.0},
      {1.202119936967507, -1.2899098015157842, -1.043620356200732,
       -1.395179813570529, 0.6854520486757538, 1.0},
      {1.6114758874547987, 1.7869587409038552, 2.301982086835751,
       2.060569857128463, 0.25851394206089684, 0.0},
      {1.4178868027488896, 1.2761858436946931, 3.5495189612165134,
       0.7366496523858206, 1.7679101867026044, 0.09286808373302281},
      {1.2657548417449334, 0.8418714320180547, 1.1664659614953568,
       1.0479084690393672, 0.12096784097047747, 1.0}};
  for (auto [x, a, b, mu, std, want] : tests) {
    double got = stats::univariates::TruncatedGaussian(mu, std, a, b).cdf(x);
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}

TEST_F(TruncatedGaussianTest, MEAN) {
  std::vector<std::array<double, 5>> tests{
      {-0.8716014720977754, -0.48995462257851363, -0.7279086498736522,
       0.9018188804906878, -0.6814772580857058},
      {2.541173646629129, 3.022494119103279, 3.020416156267725,
       0.39074952424897536, 2.8102605269069323},
      {0.2748526262393809, 0.5294296344174398, 0.2666502818761458,
       0.3435871164031, 0.39606357013544424},
      {0.4729969310149946, 0.48380485589369393, 0.4771439248613,
       0.04201410036710612, 0.47839397707241077},
      {-0.6810480884686143, -0.35553469265964105, -0.4521307700845785,
       0.16449916298077824, -0.49953469328228467},
      {-1.122277587627012, 0.9611587876850545, -0.29425254890114244,
       0.6303398721491126, -0.21320350226073825},
      {-1.3749859442727785, 0.353448784410569, -0.014528778692086379,
       0.49583843492716767, -0.20413204268616736},
      {-2.036916351036309, 3.7022524377667785, -0.43635785082650125,
       1.6509261280630452, 0.0265943786866214},
      {-1.3257518799812091, 0.012306645880225786, -0.6463232080546762,
       0.6678730778980152, -0.6536860763808615},
      {-0.5975000773894211, 0.36081553024540736, -0.32128908317534377,
       1.036026580534147, -0.1323968102936282}};
  for (auto [a, b, mu, std, want] : tests) {
    double got = stats::univariates::TruncatedGaussian(mu, std, a, b).mean();
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}
TEST_F(TruncatedGaussianTest, VARIANCE) {
  std::vector<std::array<double, 5>> tests{
      {2.4033427142626795, 3.9890891077294333, 2.1438491446476293,
       0.6296320686157156, 0.10354684157033464},
      {-0.5456642792864246, 1.9835353323659155, -1.3113450728340528,
       0.890224193967945, 0.1686620494109308},
      {-2.162359154067273, 2.048775319251451, 0.053652711273574516,
       1.3588707434068372, 1.0626836975645293},
      {-1.8578894883964712, 0.06817156664858873, -0.15613702822643796,
       1.0613292790964075, 0.2596510347817873},
      {-0.16635396829483604, 0.4121713833672835, -0.10214850660359105,
       0.898928931472382, 0.027473046281734807},
      {1.3118313172722862, 4.490189651710178, 2.0502717231942675,
       1.3570935814345626, 0.6493886837217778},
      {-1.1281803231161835, 0.4773959638117927, -0.2113086432766257,
       0.6579408579351691, 0.17438501982072918},
      {-0.936386362764765, -0.44010834608060045, 0.5912829299311543,
       0.8633173489752726, 0.019597293975097387},
      {1.9076461476536228, 2.640087638324437, 2.049624160233993,
       0.40759817653528724, 0.03854661996865017},
      {-3.0375353074478078, -2.0390345762935174, -1.3193015912161528,
       1.4211504452527766, 0.08030542066840266}};
  for (auto [a, b, mu, std, want] : tests) {
    double got = stats::univariates::TruncatedGaussian(mu, std, a, b).var();
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}
TEST_F(TruncatedGaussianTest, STD_DEVIATION) {
  std::vector<std::array<double, 5>> tests{
      {-0.9872002987475188, -0.752466947825251, -0.06993155150318377,
       0.6341209398371408, 0.06724373746436912},
      {-0.6427680803712743, -0.2042892415196343, -0.5174718461141443,
       0.6809894061807447, 0.1256804855462713},
      {1.1070062050099208, 1.1632182694395072, 1.1366532254503663,
       0.07320725504252831, 0.016067818937532764},
      {-0.5986892294316349, -0.4027564621720051, -0.5545579409616922,
       0.21085239224626806, 0.05567537004390541},
      {0.5186459595324973, 1.2442437749850686, 0.6521195362531157,
       0.5975536198076171, 0.20333915669338926},
      {1.769063510632263, 2.770860016351394, 2.2675453507848933,
       0.794842211741775, 0.28158538417361667},
      {0.42796899981276804, 0.8436049662732885, 1.2316615919421918,
       1.0359128301797937, 0.1195044976814069},
      {-2.0107241778816842, -0.7220700692267475, -1.3781574914461134,
       0.5552980087626892, 0.3394709726916461},
      {-0.6264531741043152, -0.5851998853188797, 0.05853458905577559,
       1.0781788096117797, 0.011908342655171609},
      {-2.2373126516858486, -2.174412775973182, -2.1431338389026218,
       0.0928473491389139, 0.017927773751432716}};
  for (auto [a, b, mu, std, want] : tests) {
    double got = stats::univariates::TruncatedGaussian(mu, std, a, b).std();
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}
TEST_F(TruncatedGaussianTest, ENTROPY) {
  std::vector<std::array<double, 5>> tests{
      {-2.221833199882878, -1.3287999126301853, 0.6803436751331654,
       1.2792699199551032, -0.1826887468893399},
      {-1.9944183657009493, -1.4329047621411943, -1.196552044484284,
       0.9768141020711223, -0.5809602379481098},
      {-1.2055577483803008, 1.42698258569503, -0.22544687542909864,
       0.7564189169310106, 0.8501390908792896},
      {-0.879031337800869, -0.21724622981109176, -0.7556601325504073,
       0.6800652912976658, -0.41686655990492016},
      {0.3486602872964935, 0.6684434137317379, -0.03837384025914663,
       0.9785703657392574, -1.1414990450707203},
      {-0.12124967794350527, 1.8348028751204504, 0.5166494334744112,
       0.6581004279326891, 0.5760564584903846},
      {-2.234149199440601, -1.7620123414486737, -1.7756231965495362,
       0.7073305812355035, -0.7524034798124061},
      {-1.034766720206955, 1.0365798877049692, 0.4740194778052942,
       0.8685432595626403, 0.6626165392071042},
      {-0.8733223479309342, 0.1845764677439694, -1.4347191068751692,
       0.8829830369106932, -0.023885799726957258},
      {-2.013506613565127, -1.0732916881178847, -1.6440264230948776,
       1.4542816719970446, -0.06184837363436202}};
  for (auto [a, b, mu, std, want] : tests) {
    double got = stats::univariates::TruncatedGaussian(mu, std, a, b).entropy();
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}

TEST_F(TruncatedGaussianTest, PPF) {
  std::vector<std::array<double, 6>> tests{
      {-0.5810735464663574, 0.38885426186772887, 0.1102027582821134,
       0.5877672806709054, 0.37614715285906597, -0.1461573590349155},
      {0.32237184705872063, 0.3318820386590243, 0.5987327844161845,
       0.24793316199273296, 0.9300304042775743, 0.33122939697058584},
      {-1.9954708478164476, 3.1890121919153316, 0.38572213619899126,
       1.7341406151961074, 0.723856972475684, 1.3399653172679535},
      {0.6039456922066027, 0.8263712028955505, 0.37412367720132855,
       0.4375122486373888, 0.22401566760323355, 0.647148352424451},
      {-0.16563131829741617, 1.0045605812084455, -0.5085605720300131,
       0.5305680033483922, 0.7148438106006371, 0.25364939518914364},
      {-0.12568768270979264, 0.24179031635803983, 0.09120009402063221,
       0.43687830935714345, 0.035660506372522494, -0.11144264483533768},
      {-1.435112513584494, 0.11269721291941281, -1.0456990237307926,
       1.1176345156145897, 0.11735809190428192, -1.2689832687110363},
      {-0.751751972941141, 0.296719005341146, -0.35649472046541925,
       2.025678476519001, 0.3513123406813333, -0.385710290661828},
      {-1.3758225015683578, -0.8543827107446843, 0.987906018135522,
       1.266173260719606, 0.6364130320768642, -1.006515681379787},
      {-0.4582155498145606, -0.1297863705750749, -0.2879543758793034,
       1.5772996159822277, 0.19561022508542103, -0.39383718183080996}};
  for (auto [a, b, mu, std, p, want] : tests) {
    double got = stats::univariates::TruncatedGaussian(mu, std, a, b).ppf(p);
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}

// Kolmogorov–Smirnov_test.
TEST_F(TruncatedGaussianTest, RVS) {
  std::vector<std::array<double, 4>> tests{
      {-2.221833199882878, -1.3287999126301853, 0.6803436751331654,
       1.2792699199551032},
      {-1.9944183657009493, -1.4329047621411943, -1.196552044484284,
       0.9768141020711223},
      {-1.2055577483803008, 1.42698258569503, -0.22544687542909864,
       0.7564189169310106},
      {-0.879031337800869, -0.21724622981109176, -0.7556601325504073,
       0.6800652912976658},
      {0.3486602872964935, 0.6684434137317379, -0.03837384025914663,
       0.9785703657392574},
      {-0.12124967794350527, 1.8348028751204504, 0.5166494334744112,
       0.6581004279326891},
      {-2.234149199440601, -1.7620123414486737, -1.7756231965495362,
       0.7073305812355035},
      {-1.034766720206955, 1.0365798877049692, 0.4740194778052942,
       0.8685432595626403},
      {-0.8733223479309342, 0.1845764677439694, -1.4347191068751692,
       0.8829830369106932},
      {-2.013506613565127, -1.0732916881178847, -1.6440264230948776,
       1.4542816719970446}};
  for (auto [a, b, mu, std] : tests) {
    auto P = stats::univariates::TruncatedGaussian(mu, std, a, b);
    pcg32 rng(static_cast<uint64_t>(std::abs(mu * std * a * b)));
    auto RNG = P.make_rng(rng);
    for (int N = 10; N <= 10000; N *= 10) {
      auto random_values = P.rvs(RNG, N);
      double maxDifference = kolmogorov_smirnov_statistic(random_values, P);
      EXPECT_LE(maxDifference, KS_95 / sqrt(N));
    }
  }
}

}  // namespace
}  // namespace univariates
}  // namespace stats
int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
