// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "stats/distributions/univariate/continuous/uniform.h"

#include <math.h>

#include <algorithm>
#include <array>
#include <cmath>
#include <cstdint>
#include <iostream>
#include <numeric>
#include <ostream>
#include <utility>
#include <vector>

#include "stats/statistical_tests/kolmogorov_smirnov.h"
#include "testing/base/public/gmock.h"
#include "testing/base/public/gunit.h"
#include <pcg_random.hpp>

namespace stats {
namespace univariates {
namespace {
class UniformTest : public ::testing::Test {
 private:
 protected:
  UniformTest() {}

  ~UniformTest() override {}

  void SetUp() override {}

  void TearDown() override {}
};

TEST_F(UniformTest, PDF) {
  std::vector<std::array<double, 4>> tests{
      {-0.8513263864840828, 1.566711063715378, 1.5089725997279164, 1},
      {-0.43181658403378476, 1.1171163406429552, -0.35031966037561996, 1},
      {-0.01399656089211876, 0.7115698470365104, 0.6685508939690041, 1},
      {-0.6391871164804296, 1.3690531065563658, 0.41723336605072203, 1},
      {0.23287279985539988, 1.236437039468762, -0.18938225638207623, 0},
      {-0.4288516954880164, 0.8750453707135276, 0.9683160837512208, 0},
      {-0.03206788551600718, 0.7997179585480333, 0.07821843301339976, 1},
      {-0.8959973975994, 1.1385949309176007, -0.4024755162563927, 1},
      {-0.5257749169558578, 1.559165091534354, 0.33229759872129333, 1},
      {-1.0266131392031745, 1.6600823591730987, -1.1243220111821313, 0},
      {-0.9724959081732947, -0.06077528033296971, -0.9539590211490323, 1},
      {-1.0379718972569167, 1.610720292508633, -0.41652912207611975, 1},
      {-1.6035716751598694, 1.5177749107811849, 0.10810105668659176, 1},
      {-0.7286263549741799, 1.1487065410131811, -0.2380139732809612, 1},
      {-0.07142845364297665, 0.08025648353767653, -0.0683426800295709, 1},
      {-0.7192391889669643, 0.34486222600633454, -0.09314208832808012, 1},
      {-1.0681579234159477, 0.11557887601361179, -0.1363208363609877, 1},
      {-0.4071396021860628, 0.4253168588992431, 0.37742574177680277, 1},
      {0.764950103523517, 1.5907934049171402, -0.46414968508351884, 0},
      {-1.4642383470147278, 1.2282889253200728, -0.276729963574943, 1}};

  for (auto [a, b, x, in_interval] : tests) {
    double got = stats::univariates::Uniform(a, b).pdf(x);
    double want = in_interval / (b - a);
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-18));
  }
}
TEST_F(UniformTest, LOGPDF) {
  std::vector<std::array<double, 4>> tests{
      {-0.8513263864840828, 1.566711063715378, 1.5089725997279164, 1},
      {-0.43181658403378476, 1.1171163406429552, -0.35031966037561996, 1},
      {-0.01399656089211876, 0.7115698470365104, 0.6685508939690041, 1},
      {-0.6391871164804296, 1.3690531065563658, 0.41723336605072203, 1},
      {0.23287279985539988, 1.236437039468762, -0.18938225638207623, 0},
      {-0.4288516954880164, 0.8750453707135276, 0.9683160837512208, 0},
      {-0.03206788551600718, 0.7997179585480333, 0.07821843301339976, 1},
      {-0.8959973975994, 1.1385949309176007, -0.4024755162563927, 1},
      {-0.5257749169558578, 1.559165091534354, 0.33229759872129333, 1},
      {-1.0266131392031745, 1.6600823591730987, -1.1243220111821313, 0},
      {-0.9724959081732947, -0.06077528033296971, -0.9539590211490323, 1},
      {-1.0379718972569167, 1.610720292508633, -0.41652912207611975, 1},
      {-1.6035716751598694, 1.5177749107811849, 0.10810105668659176, 1},
      {-0.7286263549741799, 1.1487065410131811, -0.2380139732809612, 1},
      {-0.07142845364297665, 0.08025648353767653, -0.0683426800295709, 1},
      {-0.7192391889669643, 0.34486222600633454, -0.09314208832808012, 1},
      {-1.0681579234159477, 0.11557887601361179, -0.1363208363609877, 1},
      {-0.4071396021860628, 0.4253168588992431, 0.37742574177680277, 1},
      {0.764950103523517, 1.5907934049171402, -0.46414968508351884, 0},
      {-1.4642383470147278, 1.2282889253200728, -0.276729963574943, 1}};

  for (auto [a, b, x, in_interval] : tests) {
    double got = stats::univariates::Uniform(a, b).logpdf(x);
    double want = std::log(in_interval / (b - a));
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-15));
  }
}

TEST_F(UniformTest, CDF) {
  std::vector<std::array<double, 4>> tests{
      {-0.8890632253841331, 0.16240894006866527, -1.5108965514700536, 0.0},
      {-0.5267459909480242, 0.7555325777433237, -0.2548604243172027,
       0.21203315197593853},
      {-0.2796562554061335, 1.3950622822003786, -2.451325957659318, 0.0},
      {-0.08175310939626204, 0.505782935125199, -0.3067064229197279, 0.0},
      {-0.5159325990456465, 1.449184569162721, 0.8040945130554663,
       0.6717294690904386},
      {-0.3282204242141763, 0.9529143097716671, 0.8769265569482699,
       0.9406871495966818},
      {-1.4991710051335994, -0.5523227970166199, 0.4228334028858176, 1.0},
      {-0.330015988861333, 1.647968950625178, 0.9756887489984744,
       0.6601186448865334},
      {0.15581415474779164, 0.594681233660976, 0.5423911501009379,
       0.8808521165690305},
      {-2.087176788204404, 0.40072860025814766, -0.35721208592122417,
       0.6953498755642972},
      {0.017324150799198672, 0.5407294948000967, 0.03404934804739096,
       0.03195457868340678},
      {-1.9286908268666132, 0.07269308457628987, -0.1727027293058512,
       0.8773869358701788},
      {-1.521760637377534, 0.7721930335289537, -1.0444989265929094,
       0.2080520268729002},
      {-1.5101268174466205, 0.39561276666588563, -0.2613012210135473,
       0.6552970861518026},
      {-0.9973840446144846, 1.5773865849410267, -0.3315058487408334,
       0.2586165106243283},
      {-1.1965815948123193, 1.2478040431375106, 0.35368741963696065,
       0.634216217924407},
      {-2.0230651541662, 0.524271681177558, -1.010432268563563,
       0.3975261031649096},
      {-0.45363841788780873, 0.3506437025369138, -0.33136488367459727,
       0.15202816413305528},
      {0.627303451968622, 2.3094802327795163, -1.2681094087305764, 0.0},
      {0.5619095159891165, 1.191639152042579, 1.176500070263562,
       0.9759593944571288},
      {0.39118552238351784, 1.2155382505644245, 0.5023644102829413,
       0.13486810208630126},
      {0.10394491700256414, 1.090881753154613, 0.8428825103544542,
       0.7487182221639644},
      {-1.6592554716471861, 1.035155384624753, -1.0984288484089801,
       0.20814443422120898},
      {-0.0727939174927825, 2.1758135943093073, 0.4019608765818652,
       0.2111327973347236},
      {-0.5285662515019007, -0.24379154169652148, 0.444919998814486, 1.0},
      {-1.827673749779969, -0.3158456693652203, 1.5346174827516916, 1.0},
      {-0.15066672961386715, 0.5629286915581676, -0.5325923109137953, 0.0},
      {-1.4338305163842187, -0.2543617558583325, -0.670082511781921,
       0.6475355941277898},
      {-1.8464259063609394, 0.4249627982518935, -0.19426040451848006,
       0.7273812265100954},
      {0.544784548097303, 3.9676338037337358, 0.012171740782545425, 0.0},
      {-0.0632080022380376, 0.43507888872897765, 0.2693892613061878,
       0.6674814641395855},
      {-1.5087416977627937, -0.6382264430637599, -1.0407353344986923,
       0.5376199448979292},
      {-0.6749005693492695, 0.21926047464564907, -0.2541337106420962,
       0.47057167333892974},
      {-0.3870183328134712, 1.2141522218487009, -0.26357582688097014,
       0.07709516364329218},
      {0.4238236562630882, 0.6265295575720038, 0.5379516408291547,
       0.5630225061486496},
      {-0.9670490432420237, -0.393885013467114, -0.15152945733458484, 1.0},
      {-1.1864927733281607, 0.2889909917762819, -0.7780244496354614,
       0.2768368811321931},
      {-1.6999939613178077, -1.1228392927637103, -1.3685201661821287,
       0.5743240299278799},
      {-0.8086158362920972, 0.48876484485971405, -0.22716760479920606,
       0.44817087223518914},
      {-0.4844323226419156, 0.5884756010584374, 0.4195758845156227,
       0.8425776221688286},
      {-0.34963660640165417, 2.423043008139608, 0.10733167082394374,
       0.1648110639357815},
      {-2.313524881513695, -0.13692436757241927, -1.7176140258008037,
       0.273780536159962},
      {-0.8150810731780812, 0.6223081771998339, -0.1489978173729378,
       0.4633979665772638},
      {-0.9820024065173037, 0.2555228554390139, -0.6383921501953749,
       0.27765918554158586},
      {-0.4813170621450007, -0.1950188115696092, 1.3095613599563114, 1.0},
      {-0.5604881042096875, 0.6565080697217996, -0.3949649260362193,
       0.13600961261755506},
      {-0.03879721652067541, 0.09194529442048323, 0.010696578524121286,
       0.37855931241118385},
      {0.34076612571102477, 0.9758277318297794, 0.42241721531139625,
       0.1285719193439998},
      {-1.1691392703580872, 0.1357509385273514, -0.9808453730029209,
       0.14429865139075265},
      {-0.8224285039332743, 1.0855711560609025, -0.285424042653039,
       0.28144892923192355}};
  for (auto [a, b, x, want] : tests) {
    double got = stats::univariates::Uniform(a, b).cdf(x);
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}

TEST_F(UniformTest, MEAN) {
  std::vector<std::array<double, 3>> tests{
      {-0.5382309450278369, 3.44464359248487, 1.4532063237285167},
      {-0.6256699321283967, 1.877165846042611, 0.6257479569571072},
      {-0.7252590010766083, 0.5650618825055191, -0.08009855928554466},
      {-0.34805833141073117, 1.5359566793723898, 0.5939491739808292},
      {-2.2955747762788996, -0.6573615763763135, -1.4764681763276066},
      {-0.9053245780644739, 0.404189428251421, -0.25056757490652637},
      {-0.44358739847455547, 0.42723041173204424, -0.00817849337125559},
      {-1.1525133048649525, 0.9794788986937166, -0.08651720308561806},
      {0.17864051893568547, 0.7571256215018057, 0.46788307021874564},
      {-2.0560569827166617, -0.7269461020414822, -1.391501542379072}};
  for (auto [a, b, want] : tests) {
    double got = stats::univariates::Uniform(a, b).mean();
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}

TEST_F(UniformTest, VARIANCE) {
  std::vector<std::array<double, 3>> tests{
      {-1.1408823075886385, 1.2247019435762887, 0.46633240411329413},
      {1.2294642589012867, 2.2560304606707406, 0.08781984721794693},
      {-1.7215557031275763, 1.0392571465712734, 0.6351739659218568},
      {-0.9986335168284839, 2.450895422153578, 0.9916041584062257},
      {-0.5680286254672124, -0.02234739450286091, 0.02481400048556416},
      {-0.8997423029017241, 0.22644198237945226, 0.10569092036785616},
      {0.3840439252609308, 1.287039882054223, 0.06795014149875277},
      {-0.20387324916722926, 1.7610736565054135, 0.3217513618427078},
      {-0.6745092266712985, 0.5889521115671021, 0.1330278794352642},
      {0.48200023104259165, 0.9823742543712018, 0.020864513601838382}};
  for (auto [a, b, want] : tests) {
    double got = stats::univariates::Uniform(a, b).var();
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}
TEST_F(UniformTest, STD_DEVIATION) {
  std::vector<std::array<double, 3>> tests{
      {-0.3498115916771831, 1.9160322263883838, 0.6540927691509022},
      {-0.21760443228799894, 0.5240022694750959, 0.21408341444787665},
      {-1.2794470668852556, 0.7232402130952325, 0.578126020099687},
      {-0.9500248539215526, 1.9248185116438934, 0.8298957954936099},
      {0.9071909377779233, 2.0364388869226553, 0.3259858037102719},
      {-0.8032382727350387, 0.5535789490128821, 0.3916793941086411},
      {-0.04364573940954208, 0.755427494415159, 0.23067257332545796},
      {0.9119776571873383, 2.5514877827207374, 0.47328580615791255},
      {-1.1686685687918899, 0.8222383078281649, 0.5747253105740328},
      {-0.4844174068151772, 0.5133103667993522, 0.28801919933715725}};
  for (auto [a, b, want] : tests) {
    double got = stats::univariates::Uniform(a, b).std();
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}
TEST_F(UniformTest, ENTROPY) {
  std::vector<std::array<double, 3>> tests{
      {-0.36766595169298655, 0.49284834432838504, -0.15022504984696525},
      {-0.6408239849346609, -0.24614400417576493, -0.9296800177443229},
      {0.25736092043215775, 0.8773606295252606, -0.47803627014778266},
      {0.20092507589350936, 2.6376494019793344, 0.8906546480499241},
      {-2.737235143365246, 0.08590694465741988, 1.0378504802833888},
      {-0.8938739048905344, 1.367377441199366, 0.8159183530129399},
      {-1.7764069647367067, 0.741718266328089, 0.923514668724124},
      {0.3733776593055602, 1.189459448225593, -0.20324069752122528},
      {-0.5816630843587846, 1.08403160404059, 0.5102422666859558},
      {-1.1429248257431588, 0.23783415632578767, 0.3226333349881742}};
  for (auto [a, b, want] : tests) {
    double got = stats::univariates::Uniform(a, b).entropy();
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}
TEST_F(UniformTest, PPF) {
  std::vector<std::array<double, 4>> tests{
      {-0.10331524433655737, 0.20920154108868952, 0.2889791348079409,
       -0.013004414071410605},
      {-1.4131116456748456, -0.5293751651280137, 0.5525398932804712,
       -0.9248119850254399},
      {-2.821261722217558, -0.5205385874292813, 0.41558676355288304,
       -1.8651116407996546},
      {-0.30492370949363373, -0.1613303525320211, 0.6987176523279164,
       -0.20459249622753128},
      {-1.8639431805063187, -1.065904846177027, 0.32474982463269975,
       -1.6047803713827093},
      {-0.734790296907454, 0.18068162625457912, 0.09259014268457966,
       -0.6500266209181548},
      {-1.3743666129015535, 0.1983679560044709, 0.2515851110649733,
       -0.9786900117076085},
      {0.9138740162351, 1.493314663382019, 0.5016035585783609,
       1.2045235068289428},
      {-1.214136545349671, 0.10481138684079762, 0.11010212807364195,
       -1.0689175711971708},
      {-0.9143658087582452, -0.45185905332398696, 0.2820713764798176,
       -0.7839058916216897},
      {-1.048094710130717, -0.565513864347666, 0.3728293943383899,
       -0.8681743856781141},
      {0.8677767163340261, 1.0498663417603153, 0.4208800631489006,
       0.9444146093822023},
      {-2.1448181123501735, -0.41351658857507284, 0.31081531312550614,
       -1.6067030871233496},
      {1.0155741851272753, 1.2506624878194097, 0.5219685973431696,
       1.1382828967352752},
      {-0.6963330950540191, 0.6476250431698701, 0.022828089630825055,
       -0.6656530982145674},
      {-1.469406963329756, -0.5840304680996902, 0.22034663761135942,
       -1.274317229585681},
      {-0.2953960695051996, -0.24782077098339889, 0.46514120418168425,
       -0.2732668378614661},
      {-0.6420616815413024, -0.304113768935398, 0.21796862063215816,
       -0.5683996411850762},
      {-0.615951827749826, 0.7849328936438081, 0.04473820352739488,
       -0.5532787619656998},
      {0.21763971718740827, 0.7585860138417047, 0.2607447497096167,
       0.3586886239148769}};
  for (auto [a, b, p, want] : tests) {
    double got = stats::univariates::Uniform(a, b).ppf(p);
    EXPECT_THAT(got, testing::DoubleNear(want, 1e-12));
  }
}

// Kolmogorov–Smirnov_test.
TEST_F(UniformTest, RVS) {
  std::vector<std::array<double, 2>> tests{
      {-0.10331524433655737, 0.20920154108868952},
      {-1.4131116456748456, -0.5293751651280137},
      {-2.821261722217558, -0.5205385874292813},
      {-0.30492370949363373, -0.1613303525320211},
      {-1.8639431805063187, -1.065904846177027},
      {-0.734790296907454, 0.18068162625457912},
      {-1.3743666129015535, 0.1983679560044709},
      {0.9138740162351, 1.493314663382019},
      {-1.214136545349671, 0.10481138684079762},
      {-0.9143658087582452, -0.45185905332398696},
      {-1.048094710130717, -0.565513864347666},
      {0.8677767163340261, 1.0498663417603153},
      {-2.1448181123501735, -0.41351658857507284},
      {1.0155741851272753, 1.2506624878194097},
      {-0.6963330950540191, 0.6476250431698701},
      {-1.469406963329756, -0.5840304680996902},
  };
  for (auto [a, b] : tests) {
    auto P = stats::univariates::Uniform(a, b);
    pcg32 rng(static_cast<uint64_t>(a * b));
    auto RNG = P.make_rng(rng);
    for (int N = 10; N <= 10000; N *= 10) {
      auto random_values = P.rvs(RNG, N);
      double maxDifference = kolmogorov_smirnov_statistic(random_values, P);
      EXPECT_LE(maxDifference, KS_95 / sqrt(N));
    }
  }
}

}  // namespace
}  // namespace univariates
}  // namespace stats

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
